name: Build and Release VIS_API

# 當標籤被推送時觸發（例如 v1.0.0）
on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: windows-latest

    steps:
      # Step 1: 檢出代碼
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: 輸出根目錄結構並保存為文件
      - name: Save root directory structure
        run: dir /s > root_directory_structure.txt

      # Step 3: 設置 .NET 環境
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0

      # Step 4: 確認解決方案文件是否存在並輸出文件結構
      - name: Verify solution file and list directory
        run: |
          if [ ! -f "VIS_API/VIS_API.sln" ]; then
            echo "Solution file VIS_API/VIS_API.sln not found!" >> directory_structure.txt
            exit 1
          fi
          dir VIS_API /s >> directory_structure.txt

      # Step 5: 恢復依賴
      - name: Restore dependencies
        run: dotnet restore VIS_API/VIS_API.sln

      # Step 6: 輸出 VIS_API 資料夾結構並保存
      - name: Save VIS_API directory structure
        run: dir VIS_API /s > VIS_API_directory_structure.txt

      # Step 7: 構建專案
      - name: Build project
        run: dotnet build VIS_API/VIS_API.sln --configuration Release --no-restore

      # Step 8: 確認 VIS_API 資料夾存在
      - name: Verify VIS_API folder exists
        run: |
          if [ ! -d "VIS_API" ]; then
            echo "VIS_API folder not found!" >> directory_structure.txt
            exit 1
          fi

      # Step 9: 壓縮 VIS_API 資料夾
      - name: Package VIS_API
        run: |
          zip -r VIS_API-${{ github.ref_name }}.zip VIS_API

      # Step 10: 保存壓縮包和目錄結構作為 Artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: VIS_API_Artifacts
          path: |
            root_directory_structure.txt
            VIS_API_directory_structure.txt
            VIS_API-${{ github.ref_name }}.zip

      # Step 11: 創建 GitHub Release 並上傳壓縮包
      - name: Create and Upload GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Release Notes
            - This release contains the latest build of VIS_API.
          artifacts: VIS_API-${{ github.ref_name }}.zip
          draft: false
          prerelease: false
